//*------------------------------------*\
//    $CSSWIZARDRY-GRIDS(FORK)
//*------------------------------------*/
//**
// * CONTENTS
// * INTRODUCTION.........How the grid system works.
// * VARIABLES............Your settings.
// * MIXINS...............Library mixins.
// * GRID SETUP...........Build the grid structure.
// * WIDTHS...............Build our responsive widths around our breakpoints.
// * PUSH.................Push classes.
// * PULL.................Pull classes.
// */
//
//
//
//
//
//*------------------------------------*\
//    $INTRODUCTION
//*------------------------------------*/
//**
// * This fork of csswizardry grids provides you with widths to suit a number of breakpoints
// * designed around devices of a size you specify. Out of the box, csswizardry
// * grids caters to the following types of device:
// *
// * palm     --  palm-based devices, like phones and small tablets
// * lap      --  lap-based devices, like iPads or laptops
// * desk     --  stationary devices, like desktop computers
// * high     --  deviced with a big screen and high res
// * regular  --  any/all types of device
// *
// * These namespaces are then used in the library to give you the ability to
// * manipulate your layouts based around them, for example:
// *
//   <div class="grid__item  one-whole  lap--one-half  desk--one-third">
// *
// * This would give you a grid item which is 100% width unless it is on a lap
// * device, at which point it become 50% wide, or it is on a desktop device, at
// * which point it becomes 33.333% width.
// *
// * csswizardry grids also has push and pull classes which allow you to nudge
// * grid items left and right by a defined amount. These follow the same naming
// * convention as above, but are prepended by either `push--` or `pull--`, for
// * example:
// *
//   `class="grid__item  one-half  push--one-half"`
// *
// * This would give you a grid item which is 50% width and pushed over to the
// * right by 50%.
// *
// * All classes in csswizardry grids follow this patten, so you should fairly
// * quickly be able to piece together any combinations you can imagine, for
// * example:
// *
//   `class="grid__item  one-whole  lap--one-half  desk--one-third  push--desk--one-third"`
// *
//   `class="grid__item  one-quarter  palm--one-half  push--palm--one-half"`
// *
//   `class="grid__item  palm--one-third  desk--five-twelfths"`
// 
// * Things different from src:
// *     - Different defaults [1]
// *     - Uses rem for spacing [2]
// *     - Shares media-queries with mq-mixin [3]
// *     - Uses flexbox for browsers that support it to get rid of letter-spacing dependency. [4]
// *     - Uses .scss-comments
// *      - Namespaced variables
// */





//*------------------------------------*\
//    $VARIABLES
//*------------------------------------*/
//**
// * If you are building a non-responsive site but would still like to use
// * csswizardry-grids, set this to ‘false’:
// */
$grid__responsive:            true!default;


//**
// * Is this build mobile first? Setting to ‘true’ means that all grids will be
// * 100% width if you do not apply a more specific class to them.
// */
$grid__mobileFirst:          true!default;


//**
// * Set the spacing between your grid items.
// */
$grid__gutter:                $base__rhythmNumerical!default; // [2]


//**
// * Would you like Sass’ silent classes, or regular CSS classes?
// */
$grid__useSilentClasses:    true!default;


//**
// * Would you like push and pull classes enabled?
// */
$grid__push:                  true!default; // [1]
$grid__pull:                  true!default; // [1]


//**
// * Using `inline-block` means that the grid items need their whitespace removing
// * in order for them to work correctly. Set the following to true if you are
// * going to achieve this by manually removing/commenting out any whitespace in
// * your HTML yourself.
// *
// * Setting this to false invokes a hack which cannot always be guaranteed,
// * please see the following for more detail:
// *
// * github.com/csswizardry/csswizardry-grids/commit/744d4b23c9d2b77d605b5991e54a397df72e0688
// * github.com/csswizardry/inuit.css/issues/170#issuecomment-14859371
// */
$grid__useMarkupFix:        false!default; // [1]


//**
// * Define your breakpoints. The first value is the prefix that shall be used for
// * your classes (e.g. `.palm--one-half`), the second value is the media query
// * that the breakpoint fires at.
// */
$grid__breakpoints: (
    "palm"  $bp__palm,
    "lap"   $bp__lap,
    "lapUp" $bp__lapUp,
    "desk"  $bp__desk
    )!default; // [3]


//**
// * Define which namespaced breakpoints you would like to generate for each of
// * widths, push and pull. This is handy if you only need pull on, say, desk, or
// * you only need a new width breakpoint at mobile sizes. It allows you to only
// * compile as much CSS as you need. All are turned on by default, but you can
// * add and remove breakpoints at will.
// *
// * Push and pull shall only be used if `$push` and/or `$pull` and `$grid__responsive`
// * have been set to ‘true’.
// */
$grid__breakpointHasWidths: ("palm", "lap","lapUp", "desk")!default;
$grid__breakpointHasPush:   ("palm", "lap","lapUp", "desk")!default;
$grid__breakpointHasPull:   ("palm", "lap","lapUp", "desk")!default;


//**
// * You do not need to edit anything from this line onward; csswizardry-grids is
// * good to go. Happy griddin’!
// */
$grid__classType:            unquote(".");

@if $grid__useSilentClasses == true {
    $grid__classType:        unquote("%");
}





//*------------------------------------*\
//    $MIXINS
//*------------------------------------*/
//**
// * These mixins are for the library to use only, you should not need to modify
// * them at all.
// *
// * Enclose a block of code with a media query as named in `$breakpoints`.
// */
@mixin grid-media-query($media-query) {
    $breakpoint-found: false;

    @each $breakpoint in $grid__breakpoints {
        $name: nth($breakpoint, 1);
        $declaration: nth($breakpoint, 2);

        @if $media-query == $name and $declaration {
            $breakpoint-found: true;

            @media only screen and #{$declaration} {
                @content;
            }
        }
    }

    @if $breakpoint-found == false {
        @warn "Breakpoint ‘#{$media-query}’ does not exist";
    }
}


//**
// * Drop relative positioning into silent classes which can’t take advantage of
// * the `[class*="push--"]` and `[class*="pull--"]` selectors.
// */

@mixin silent-relative() {
    @if $grid__useSilentClasses == true{
        position:relative;
    }
}





//*------------------------------------*\
//    $GRID SETUP
//*------------------------------------*/
//**
// * 1. Allow the grid system to be used on lists.
// * 2. Remove any margins and paddings that might affect the grid system.
// * 3. Apply a negative `margin-left` to negate the columns’ gutters.
// * 4. Use flexbox when possible to avoid `letter-spacing` side-effects. (Ch:21+;FF:28+;IE:10+)
// */
#{$grid__classType}grid {
    list-style:none;                      //* [1] */
    margin:0;                             //* [2] */
    padding:0;                            //* [2] */
    @include rem("margin-left",-$grid__gutter); //* [3] */
    display: block;                       //* [4] */
    display: flex;                        //* [4] */
    flex-flow: row wrap;
    @if $grid__useMarkupFix != true{
        letter-spacing:-0.31em;
    }
}

@if $grid__useMarkupFix != true {
    //* Opera hack */
    .opera:-o-prefocus,
    #{$grid__classType}grid{
        word-spacing:-0.43em;
    }
}


    //**
    // * 1. Cause columns to stack side-by-side.
    // * 2. Space columns apart.
    // * 3. Align columns to the tops of each other.
    // * 4. Full-width unless told to behave otherwise.
    // * 5. Required to combine fluid widths and fixed gutters.
    // */
    #{$grid__classType}grid__item {
        display:inline-block;                 //* [1] */
        @include rem("padding-left",$grid__gutter); //* [3] */
        vertical-align:top;                   //* [3] */
        @if $grid__mobileFirst == true{
            width:100%;                       //* [4] */
        }
        box-sizing:border-box;                //* [5] */
        @if $grid__useMarkupFix != true{
            letter-spacing:normal;
            word-spacing:normal;
        }
    }


//**
// * Reversed grids allow you to structure your source in the opposite order to
// * how your rendered layout will appear. Extends `.grid`.
// */
#{$grid__classType}grid--rev {
    direction:rtl;
    text-align:left;
    justify-content: flex-end;

    > #{$grid__classType}grid__item {
        direction:ltr;
        text-align:left;
    }
}


//**
// * Gutterless grids have all the properties of regular grids, minus any spacing.
// * Extends `.grid`.
// */
#{$grid__classType}grid--full {
    margin-left:0;

    > #{$grid__classType}grid__item {
        padding-left:0;
    }
}


//**
// * Align the entire grid to the right. Extends `.grid`.
// */
#{$grid__classType}grid--right {
    text-align:right;
    justify-content: flex-end;

    > #{$grid__classType}grid__item {
        text-align:left;
    }
}


//**
// * Centered grids align grid items centrally without needing to use push or pull
// * classes. Extends `.grid`.
// */
#{$grid__classType}grid--center {
    text-align:center;
    justify-content: center;

    > #{$grid__classType}grid__item {
        text-align:left;
    }
}


//**
// * Align grid cells vertically (`.grid--middle` or `.grid--bottom`). Extends
// * `.grid`.
// */
#{$grid__classType}grid--middle {
    > #{$grid__classType}grid__item{
        vertical-align:middle;
    }
}

#{$grid__classType}grid--bottom {
    > #{$grid__classType}grid__item{
        vertical-align:bottom;
    }
}


//**
// * Create grids with narrower gutters. Extends `.grid`.
// */
#{$grid__classType}grid--narrow {
    @include rem("margin-left", (-$grid__gutter / 2)); //* [3] */

    > #{$grid__classType}grid__item {
        @include rem("padding-left", ($grid__gutter / 2)); //* [3] */
    }
}


//**
// * Create grids with wider gutters. Extends `.grid`.
// */
#{$grid__classType}grid--wide {
    @include rem("margin-left",(-$grid__gutter * 2 )); //* [3] */

    > #{$grid__classType}grid__item {
        @include rem("padding-left", ($grid__gutter * 2)); //* [3] */
    }
}





//*------------------------------------*\
//    $WIDTHS
//*------------------------------------*/
//**
// * Create our width classes, prefixed by the specified namespace.
// */
@mixin device-type($namespace:"") {


    //**
    // * Whole
    // */
    #{$grid__classType}#{$namespace}one-whole         { width:100%; }


    //**
    // * Halves
    // */
    #{$grid__classType}#{$namespace}one-half          { width:50%; }


    //**
    // * Thirds
    // */
    #{$grid__classType}#{$namespace}one-third         { width:33.333%; }
    #{$grid__classType}#{$namespace}two-thirds        { width:66.666%; }


    //**
    // * Quarters
    // */
    #{$grid__classType}#{$namespace}one-quarter       { width:25%; }
    #{$grid__classType}#{$namespace}two-quarters      { @extend #{$grid__classType}#{$namespace}one-half; }
    #{$grid__classType}#{$namespace}three-quarters    { width:75%; }


    //**
    // * Fifths
    // */
    #{$grid__classType}#{$namespace}one-fifth         { width:20%; }
    #{$grid__classType}#{$namespace}two-fifths        { width:40%; }
    #{$grid__classType}#{$namespace}three-fifths      { width:60%; }
    #{$grid__classType}#{$namespace}four-fifths       { width:80%; }


    //**
    // * Sixths
    // */
    #{$grid__classType}#{$namespace}one-sixth         { width:16.666%; }
    #{$grid__classType}#{$namespace}two-sixths        { @extend #{$grid__classType}#{$namespace}one-third; }
    #{$grid__classType}#{$namespace}three-sixths      { @extend #{$grid__classType}#{$namespace}one-half; }
    #{$grid__classType}#{$namespace}four-sixths       { @extend #{$grid__classType}#{$namespace}two-thirds; }
    #{$grid__classType}#{$namespace}five-sixths       { width:83.333%; }


    //**
    // * Eighths
    // */
    #{$grid__classType}#{$namespace}one-eighth        { width:12.5%; }
    #{$grid__classType}#{$namespace}two-eighths       { @extend #{$grid__classType}#{$namespace}one-quarter; }
    #{$grid__classType}#{$namespace}three-eighths     { width:37.5%; }
    #{$grid__classType}#{$namespace}four-eighths      { @extend #{$grid__classType}#{$namespace}one-half; }
    #{$grid__classType}#{$namespace}five-eighths      { width:62.5%; }
    #{$grid__classType}#{$namespace}six-eighths       { @extend #{$grid__classType}#{$namespace}three-quarters; }
    #{$grid__classType}#{$namespace}seven-eighths     { width:87.5%; }


    //**
    // * Tenths
    // */
    #{$grid__classType}#{$namespace}one-tenth         { width:10%; }
    #{$grid__classType}#{$namespace}two-tenths        { @extend #{$grid__classType}#{$namespace}one-fifth; }
    #{$grid__classType}#{$namespace}three-tenths      { width:30%; }
    #{$grid__classType}#{$namespace}four-tenths       { @extend #{$grid__classType}#{$namespace}two-fifths; }
    #{$grid__classType}#{$namespace}five-tenths       { @extend #{$grid__classType}#{$namespace}one-half; }
    #{$grid__classType}#{$namespace}six-tenths        { @extend #{$grid__classType}#{$namespace}three-fifths; }
    #{$grid__classType}#{$namespace}seven-tenths      { width:70%; }
    #{$grid__classType}#{$namespace}eight-tenths      { @extend #{$grid__classType}#{$namespace}four-fifths; }
    #{$grid__classType}#{$namespace}nine-tenths       { width:90%; }


    //**
    // * Twelfths
    // */
    #{$grid__classType}#{$namespace}one-twelfth       { width:8.333%; }
    #{$grid__classType}#{$namespace}two-twelfths      { @extend #{$grid__classType}#{$namespace}one-sixth; }
    #{$grid__classType}#{$namespace}three-twelfths    { @extend #{$grid__classType}#{$namespace}one-quarter; }
    #{$grid__classType}#{$namespace}four-twelfths     { @extend #{$grid__classType}#{$namespace}one-third; }
    #{$grid__classType}#{$namespace}five-twelfths     { width:41.666% }
    #{$grid__classType}#{$namespace}six-twelfths      { @extend #{$grid__classType}#{$namespace}one-half; }
    #{$grid__classType}#{$namespace}seven-twelfths    { width:58.333%; }
    #{$grid__classType}#{$namespace}eight-twelfths    { @extend #{$grid__classType}#{$namespace}two-thirds; }
    #{$grid__classType}#{$namespace}nine-twelfths     { @extend #{$grid__classType}#{$namespace}three-quarters; }
    #{$grid__classType}#{$namespace}ten-twelfths      { @extend #{$grid__classType}#{$namespace}five-sixths; }
    #{$grid__classType}#{$namespace}eleven-twelfths   { width:91.666%; }


}


//**
// * Our regular, non-responsive width classes.
// */
@include device-type();


//**
// * Our responsive classes, if we have enabled them.
// */
@if $grid__responsive == true {

    @each $name in $grid__breakpointHasWidths {
        @include grid-media-query($name) {
           @include device-type("#{$name}--");
        }
    }


}





//*------------------------------------*\
//    $PUSH
//*------------------------------------*/
//**
// * Push classes, to move grid items over to the right by certain amounts.
// */
@mixin push-setup($namespace: "") {

    //**
    // * Whole
    // */
    #{$grid__classType}push--#{$namespace}one-whole           { left:100%; @include silent-relative(); }


    //**
    // * Halves
    // */
    #{$grid__classType}push--#{$namespace}one-half            { left:50%; @include silent-relative(); }


    //**
    // * Thirds
    // */
    #{$grid__classType}push--#{$namespace}one-third           { left:33.333%; @include silent-relative(); }
    #{$grid__classType}push--#{$namespace}two-thirds          { left:66.666%; @include silent-relative(); }


    //**
    // * Quarters
    // */
    #{$grid__classType}push--#{$namespace}one-quarter         { left:25%; @include silent-relative(); }
    #{$grid__classType}push--#{$namespace}two-quarters        { @extend #{$grid__classType}push--#{$namespace}one-half; }
    #{$grid__classType}push--#{$namespace}three-quarters      { left:75%; @include silent-relative(); }


    //**
    // * Fifths
    // */
    #{$grid__classType}push--#{$namespace}one-fifth           { left:20%; @include silent-relative(); }
    #{$grid__classType}push--#{$namespace}two-fifths          { left:40%; @include silent-relative(); }
    #{$grid__classType}push--#{$namespace}three-fifths        { left:60%; @include silent-relative(); }
    #{$grid__classType}push--#{$namespace}four-fifths         { left:80%; @include silent-relative(); }


    //**
    // * Sixths
    // */
    #{$grid__classType}push--#{$namespace}one-sixth           { left:16.666%; @include silent-relative(); }
    #{$grid__classType}push--#{$namespace}two-sixths          { @extend #{$grid__classType}push--#{$namespace}one-third; }
    #{$grid__classType}push--#{$namespace}three-sixths        { @extend #{$grid__classType}push--#{$namespace}one-half; }
    #{$grid__classType}push--#{$namespace}four-sixths         { @extend #{$grid__classType}push--#{$namespace}two-thirds; }
    #{$grid__classType}push--#{$namespace}five-sixths         { left:83.333%; @include silent-relative(); }


    //**
    // * Eighths
    // */
    #{$grid__classType}push--#{$namespace}one-eighth          { left:12.5%; @include silent-relative(); }
    #{$grid__classType}push--#{$namespace}two-eighths         { @extend #{$grid__classType}push--#{$namespace}one-quarter; }
    #{$grid__classType}push--#{$namespace}three-eighths       { left:37.5%; @include silent-relative(); }
    #{$grid__classType}push--#{$namespace}four-eighths        { @extend #{$grid__classType}push--#{$namespace}one-half; }
    #{$grid__classType}push--#{$namespace}five-eighths        { left:62.5%; @include silent-relative(); }
    #{$grid__classType}push--#{$namespace}six-eighths         { @extend #{$grid__classType}push--#{$namespace}three-quarters; }
    #{$grid__classType}push--#{$namespace}seven-eighths       { left:87.5%; @include silent-relative(); }


    //**
    // * Tenths
    // */
    #{$grid__classType}push--#{$namespace}one-tenth           { left:10%; @include silent-relative(); }
    #{$grid__classType}push--#{$namespace}two-tenths          { @extend #{$grid__classType}push--#{$namespace}one-fifth; }
    #{$grid__classType}push--#{$namespace}three-tenths        { left:30%; @include silent-relative(); }
    #{$grid__classType}push--#{$namespace}four-tenths         { @extend #{$grid__classType}push--#{$namespace}two-fifths; }
    #{$grid__classType}push--#{$namespace}five-tenths         { @extend #{$grid__classType}push--#{$namespace}one-half; }
    #{$grid__classType}push--#{$namespace}six-tenths          { @extend #{$grid__classType}push--#{$namespace}three-fifths; }
    #{$grid__classType}push--#{$namespace}seven-tenths        { left:70%; @include silent-relative(); }
    #{$grid__classType}push--#{$namespace}eight-tenths        { @extend #{$grid__classType}push--#{$namespace}four-fifths; }
    #{$grid__classType}push--#{$namespace}nine-tenths         { left:90%; @include silent-relative(); }


    //**
    // * Twelfths
    // */
    #{$grid__classType}push--#{$namespace}one-twelfth         { left:8.333%; @include silent-relative(); }
    #{$grid__classType}push--#{$namespace}two-twelfths        { @extend #{$grid__classType}push--#{$namespace}one-sixth; }
    #{$grid__classType}push--#{$namespace}three-twelfths      { @extend #{$grid__classType}push--#{$namespace}one-quarter; }
    #{$grid__classType}push--#{$namespace}four-twelfths       { @extend #{$grid__classType}push--#{$namespace}one-third; }
    #{$grid__classType}push--#{$namespace}five-twelfths       { left:41.666%; @include silent-relative(); }
    #{$grid__classType}push--#{$namespace}six-twelfths        { @extend #{$grid__classType}push--#{$namespace}one-half; }
    #{$grid__classType}push--#{$namespace}seven-twelfths      { left:58.333%; @include silent-relative(); }
    #{$grid__classType}push--#{$namespace}eight-twelfths      { @extend #{$grid__classType}push--#{$namespace}two-thirds; }
    #{$grid__classType}push--#{$namespace}nine-twelfths       { @extend #{$grid__classType}push--#{$namespace}three-quarters; }
    #{$grid__classType}push--#{$namespace}ten-twelfths        { @extend #{$grid__classType}push--#{$namespace}five-sixths; }
    #{$grid__classType}push--#{$namespace}eleven-twelfths     { left:91.666%; @include silent-relative(); }
}

@if $grid__push == true {

    //**
    // * Not a particularly great selector, but the DRYest way to do things.
    // */
    [class*="push--"] { position:relative; }


    @include push-setup();


    @if $grid__responsive == true {
        @each $name in $grid__breakpointHasPush {
            @include grid-media-query($name) {
               @include  push-setup("#{$name}--");
            }
        }
    }


}





//*------------------------------------*\
//    $PULL
//*------------------------------------*/
//**
// * Pull classes, to move grid items back to the left by certain amounts.
// */
@mixin pull-setup($namespace: "") {

    //**
    // * Whole
    // */
    #{$grid__classType}pull--#{$namespace}one-whole           { right:100%; @include silent-relative(); }


    //**
    // * Halves
    // */
    #{$grid__classType}pull--#{$namespace}one-half            { right:50%; @include silent-relative(); }


    //**
    // * Thirds
    // */
    #{$grid__classType}pull--#{$namespace}one-third           { right:33.333%; @include silent-relative(); }
    #{$grid__classType}pull--#{$namespace}two-thirds          { right:66.666%; @include silent-relative(); }


    //**
    // * Quarters
    // */
    #{$grid__classType}pull--#{$namespace}one-quarter         { right:25%; @include silent-relative(); }
    #{$grid__classType}pull--#{$namespace}two-quarters        { @extend #{$grid__classType}pull--#{$namespace}one-half; }
    #{$grid__classType}pull--#{$namespace}three-quarters      { right:75%; @include silent-relative(); }


    //**
    // * Fifths
    // */
    #{$grid__classType}pull--#{$namespace}one-fifth           { right:20%; @include silent-relative(); }
    #{$grid__classType}pull--#{$namespace}two-fifths          { right:40%; @include silent-relative(); }
    #{$grid__classType}pull--#{$namespace}three-fifths        { right:60%; @include silent-relative(); }
    #{$grid__classType}pull--#{$namespace}four-fifths         { right:80%; @include silent-relative(); }


    //**
    // * Sixths
    // */
    #{$grid__classType}pull--#{$namespace}one-sixth           { right:16.666%; @include silent-relative(); }
    #{$grid__classType}pull--#{$namespace}two-sixths          { @extend #{$grid__classType}pull--#{$namespace}one-third; }
    #{$grid__classType}pull--#{$namespace}three-sixths        { @extend #{$grid__classType}pull--#{$namespace}one-half; }
    #{$grid__classType}pull--#{$namespace}four-sixths         { @extend #{$grid__classType}pull--#{$namespace}two-thirds; }
    #{$grid__classType}pull--#{$namespace}five-sixths         { right:83.333%; @include silent-relative(); }


    //**
    // * Eighths
    // */
    #{$grid__classType}pull--#{$namespace}one-eighth          { right:12.5%; @include silent-relative(); }
    #{$grid__classType}pull--#{$namespace}two-eighths         { @extend #{$grid__classType}pull--#{$namespace}one-quarter; }
    #{$grid__classType}pull--#{$namespace}three-eighths       { right:37.5%; @include silent-relative(); }
    #{$grid__classType}pull--#{$namespace}four-eighths        { @extend #{$grid__classType}pull--#{$namespace}one-half; }
    #{$grid__classType}pull--#{$namespace}five-eighths        { right:62.5%; @include silent-relative(); }
    #{$grid__classType}pull--#{$namespace}six-eighths         { @extend #{$grid__classType}pull--#{$namespace}three-quarters; }
    #{$grid__classType}pull--#{$namespace}seven-eighths       { right:87.5%; @include silent-relative(); }


    //**
    // * Tenths
    // */
    #{$grid__classType}pull--#{$namespace}one-tenth           { right:10%; @include silent-relative(); }
    #{$grid__classType}pull--#{$namespace}two-tenths          { @extend #{$grid__classType}pull--#{$namespace}one-fifth; }
    #{$grid__classType}pull--#{$namespace}three-tenths        { right:30%; @include silent-relative(); }
    #{$grid__classType}pull--#{$namespace}four-tenths         { @extend #{$grid__classType}pull--#{$namespace}two-fifths; }
    #{$grid__classType}pull--#{$namespace}five-tenths         { @extend #{$grid__classType}pull--#{$namespace}one-half; }
    #{$grid__classType}pull--#{$namespace}six-tenths          { @extend #{$grid__classType}pull--#{$namespace}three-fifths; }
    #{$grid__classType}pull--#{$namespace}seven-tenths        { right:70%; @include silent-relative(); }
    #{$grid__classType}pull--#{$namespace}eight-tenths        { @extend #{$grid__classType}pull--#{$namespace}four-fifths; }
    #{$grid__classType}pull--#{$namespace}nine-tenths         { right:90%; @include silent-relative(); }


    //**
    // * Twelfths
    // */
    #{$grid__classType}pull--#{$namespace}one-twelfth         { right:8.333%; @include silent-relative(); }
    #{$grid__classType}pull--#{$namespace}two-twelfths        { @extend #{$grid__classType}pull--#{$namespace}one-sixth; }
    #{$grid__classType}pull--#{$namespace}three-twelfths      { @extend #{$grid__classType}pull--#{$namespace}one-quarter; }
    #{$grid__classType}pull--#{$namespace}four-twelfths       { @extend #{$grid__classType}pull--#{$namespace}one-third; }
    #{$grid__classType}pull--#{$namespace}five-twelfths       { right:41.666%; @include silent-relative(); }
    #{$grid__classType}pull--#{$namespace}six-twelfths        { @extend #{$grid__classType}pull--#{$namespace}one-half; }
    #{$grid__classType}pull--#{$namespace}seven-twelfths      { right:58.333%; @include silent-relative(); }
    #{$grid__classType}pull--#{$namespace}eight-twelfths      { @extend #{$grid__classType}pull--#{$namespace}two-thirds; }
    #{$grid__classType}pull--#{$namespace}nine-twelfths       { @extend #{$grid__classType}pull--#{$namespace}three-quarters; }
    #{$grid__classType}pull--#{$namespace}ten-twelfths        { @extend #{$grid__classType}pull--#{$namespace}five-sixths; }
    #{$grid__classType}pull--#{$namespace}eleven-twelfths     { right:91.666%; @include silent-relative(); }
}

@if $grid__pull == true {

    //**
    // * Not a particularly great selector, but the DRYest way to do things.
    // */
    [class*="pull--"] { position:relative; }


    @include pull-setup();


    @if $grid__responsive == true {
        @each $name in $grid__breakpointHasPull {
            @include grid-media-query($name) {
               @include  pull-setup("#{$name}--");
            }
        }
    }


}

